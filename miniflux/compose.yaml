services:
  miniflux:
    image: miniflux/miniflux:2.2.0
    container_name: miniflux
    restart: always
    networks:
      - caddy
      - internal
    labels:
      - caddy=${DOMAIN}
      - caddy.reverse_proxy="{{upstreams 8080}}"
      - caddy.tls=/etc/ssl/certs/caddy/${ROOT_DOMAIN}.pem /etc/ssl/private/caddy/${ROOT_DOMAIN}.pem
    depends_on:
      db:
        condition: service_healthy
    environment:
      - BASE_URL=https://${DOMAIN}
      - DATABASE_URL=postgres://miniflux:${POSTGRES_PASSWORD}@db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OAUTH2_PROVIDER=${OAUTH2_PROVIDER}
      - OAUTH2_OIDC_PROVIDER_NAME=${OAUTH2_OIDC_PROVIDER_NAME}
      - OAUTH2_CLIENT_ID=${OAUTH2_CLIENT_ID}
      - OAUTH2_CLIENT_SECRET=${OAUTH2_CLIENT_SECRET}
      - OAUTH2_REDIRECT_URL=${OAUTH2_REDIRECT_URL}
      - OAUTH2_OIDC_DISCOVERY_ENDPOINT=${OAUTH2_OIDC_DISCOVERY_ENDPOINT}
      - OAUTH2_USER_CREATION=1
      - POLLING_FREQUENCY=15
      - POLLING_PARSING_ERROR_LIMIT=5
      - FORCE_REFRESH_INTERVAL=1
      - PORT:8080
  db:
    image: postgres:15
    container_name: miniflux-db
    restart: always
    networks:
      - internal
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=miniflux
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s
      start_period: 30s
volumes:
  db:
    name: miniflux-db

networks:
  caddy:
    external: true
  internal:
    external: false
    driver: bridge
    name: miniflux-internal
